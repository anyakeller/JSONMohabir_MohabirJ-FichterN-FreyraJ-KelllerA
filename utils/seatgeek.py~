import urllib2, json, requests,dateutil.parser
from requests import auth
from requests.auth import HTTPBasicAuth

#
#    Input: Single word query
#  Returns: List of events relevant to the query in New York and information separated in a list of entries
#
#           [organization, event, performance, url, time, ticket type, price, seat]
#
def seatgeek(query):

    fullList = []

    link = "https://api.seatgeek.com/2/events?q="+query.replace(" ","+")+"&venue.state=NY"
    u = urllib2.urlopen(link)
    response = u.read()
    data = json.loads(response)

    events = data['events']
    
    for i in events:
        
        orgName = "N/A"
        eventName = i['title']
        url = i['url']
        time = i['datetime_utc']
        ticket_type = "N/A"
            
        seat = "N/A"

        for j in i['performers']:

            
            price = "N/A"
        
            try:
                float(i['stats']['average_price'])
                price = i['stats']['average_price'] # seatgeek does not show ticket types nor specific prices or seats
            except:
                price = 999999

            
            entry = []
            perfName = j['name']

            entry.append(orgName)
            entry.append(eventName)
            entry.append(perfName)
            entry.append(url)
            entry.append(dateutil.parser.parse(time)) # datetime: year, month, day, hour, minute, second
            entry.append(ticket_type)
            entry.append(price)
            entry.append(seat)

            fullList.append(entry)

    return fullList


def byPriceAsc(query):
    fullList = seatgeek(query)
    orderedList = sorted(fullList, key=lambda entry: float(entry[6]))
    
    for i in orderedList:
        if i[6] == 999999:
            i[6] = "N/A: Price not Defined"
    
    return orderedList

def byPriceDes(query):
    fullList = seatgeek(query)
    orderedList = sorted(fullList, key=lambda entry: float(entry[6]),reverse=True)
    
    for i in orderedList:
        if i[6] == 999999:
            i[6] = "N/A: Price not Defined"
    
    return orderedList

def byDateAsc(query):
 
   fullList = seatgeek(query)
   orderedList = sorted(fullList, key=lambda entry: entry[4])
   return orderedList

def byDateDes(query):
 
   fullList = seatgeek(query)
   orderedList = sorted(fullList, key=lambda entry: entry[4],reverse=True)
   return orderedList

def byAlphaEventAsc(query):

    fullList = seatgeek(query)
    orderedList = sorted(fullList, key=lambda entry: entry[1])

    return orderedList

def byAlphaEventDes(query):

    fullList = seatgeek(query)
    orderedList = sorted(fullList, key=lambda entry: entry[1],reverse=True)

    return orderedList

def priceRange(oList,minP,maxP):

    fullList = oList
    orderedList = []

    for i in fullList:
        if i[6] != "N/A: Price Defined by Buyer":
            if i[6] >= minP and i[6] <= maxP:
                orderedList.append(i)
        else:
            orderedList.append(i)

    return orderedList


## TESTING ##

def main():
    #listF = byAlphaEventDes("music")
    #for i in listF:
        #print(i[1])

    l = priceRange(byPriceAsc("music"),10,140)
    for i in l:
        print(i[6])


main()
